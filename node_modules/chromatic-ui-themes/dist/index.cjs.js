'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var oceanicLight = {
    name: 'oceanic-light',
    displayName: 'Oceanic Light',
    category: 'light',
    colors: {
        // Couleurs principales - Bleu océan
        primary: '#0077BE',
        primaryLight: '#4A9FD9',
        primaryDark: '#005A8A',
        // Couleurs secondaires - Turquoise
        secondary: '#17A2B8',
        secondaryLight: '#5BC0DE',
        secondaryDark: '#117A8B',
        // Couleurs d'accent - Corail
        accent: '#FF6B6B',
        accentLight: '#FF8E8E',
        accentDark: '#E55555',
        // Couleurs de fond - Blanc cassé avec nuances océan
        background: '#FAFCFF',
        backgroundLight: '#FFFFFF',
        backgroundDark: '#F0F8FF',
        surface: '#FFFFFF',
        surfaceLight: '#FAFCFF',
        surfaceDark: '#F0F8FF',
        // Couleurs de texte
        text: '#1A365D',
        textSecondary: '#2D5A87',
        textMuted: '#68A3D9',
        textInverse: '#FFFFFF',
        // Couleurs de bordure
        border: '#B3D9FF',
        borderLight: '#D6ECFF',
        borderDark: '#87CEEB',
        // Couleurs d'état
        success: '#28A745',
        successLight: '#71DD8A',
        successDark: '#1E7E34',
        warning: '#FFC107',
        warningLight: '#FFD54F',
        warningDark: '#FF8F00',
        error: '#DC3545',
        errorLight: '#FF6B6B',
        errorDark: '#B21E2F',
        info: '#17A2B8',
        infoLight: '#5BC0DE',
        infoDark: '#117A8B',
    },
};

var sakuraLight = {
    name: 'sakura-light',
    displayName: 'Sakura Light',
    category: 'light',
    colors: {
        // Couleurs principales - Rose cerisier
        primary: '#E91E63',
        primaryLight: '#F06292',
        primaryDark: '#AD1457',
        // Couleurs secondaires - Rose poudré
        secondary: '#F8BBD9',
        secondaryLight: '#FCE4EC',
        secondaryDark: '#F48FB1',
        // Couleurs d'accent - Violet doux
        accent: '#9C27B0',
        accentLight: '#CE93D8',
        accentDark: '#7B1FA2',
        // Couleurs de fond - Blanc rosé
        background: '#FFF8FA',
        backgroundLight: '#FFFFFF',
        backgroundDark: '#FCE4EC',
        surface: '#FFFFFF',
        surfaceLight: '#FFF8FA',
        surfaceDark: '#F8BBD9',
        // Couleurs de texte
        text: '#4A148C',
        textSecondary: '#6A1B9A',
        textMuted: '#BA68C8',
        textInverse: '#FFFFFF',
        // Couleurs de bordure
        border: '#F8BBD9',
        borderLight: '#FCE4EC',
        borderDark: '#F06292',
        // Couleurs d'état
        success: '#4CAF50',
        successLight: '#81C784',
        successDark: '#388E3C',
        warning: '#FF9800',
        warningLight: '#FFB74D',
        warningDark: '#F57C00',
        error: '#F44336',
        errorLight: '#EF5350',
        errorDark: '#D32F2F',
        info: '#E91E63',
        infoLight: '#F06292',
        infoDark: '#AD1457',
    },
};

var forestLight = {
    name: 'forest-light',
    displayName: 'Forest Light',
    category: 'light',
    colors: {
        // Couleurs principales - Vert forêt
        primary: '#2E7D32',
        primaryLight: '#66BB6A',
        primaryDark: '#1B5E20',
        // Couleurs secondaires - Vert sage
        secondary: '#689F38',
        secondaryLight: '#9CCC65',
        secondaryDark: '#33691E',
        // Couleurs d'accent - Orange terre
        accent: '#FF7043',
        accentLight: '#FFAB91',
        accentDark: '#D84315',
        // Couleurs de fond - Blanc naturel
        background: '#F9FFF9',
        backgroundLight: '#FFFFFF',
        backgroundDark: '#E8F5E8',
        surface: '#FFFFFF',
        surfaceLight: '#F9FFF9',
        surfaceDark: '#E8F5E8',
        // Couleurs de texte
        text: '#1B5E20',
        textSecondary: '#2E7D32',
        textMuted: '#81C784',
        textInverse: '#FFFFFF',
        // Couleurs de bordure
        border: '#C8E6C9',
        borderLight: '#E8F5E8',
        borderDark: '#A5D6A7',
        // Couleurs d'état
        success: '#4CAF50',
        successLight: '#81C784',
        successDark: '#388E3C',
        warning: '#FFC107',
        warningLight: '#FFECB3',
        warningDark: '#F57F17',
        error: '#F44336',
        errorLight: '#FFCDD2',
        errorDark: '#C62828',
        info: '#2196F3',
        infoLight: '#BBDEFB',
        infoDark: '#0D47A1',
    },
};

var sunsetLight = {
    name: 'sunset-light',
    displayName: 'Sunset Light',
    category: 'light',
    colors: {
        // Couleurs principales - Orange coucher de soleil
        primary: '#FF6F00',
        primaryLight: '#FFB74D',
        primaryDark: '#E65100',
        // Couleurs secondaires - Rouge corail
        secondary: '#FF5722',
        secondaryLight: '#FF8A65',
        secondaryDark: '#D84315',
        // Couleurs d'accent - Violet crépuscule
        accent: '#673AB7',
        accentLight: '#9575CD',
        accentDark: '#512DA8',
        // Couleurs de fond - Blanc chaud
        background: '#FFFAF7',
        backgroundLight: '#FFFFFF',
        backgroundDark: '#FFF3E0',
        surface: '#FFFFFF',
        surfaceLight: '#FFFAF7',
        surfaceDark: '#FFF3E0',
        // Couleurs de texte
        text: '#3E2723',
        textSecondary: '#5D4037',
        textMuted: '#A1887F',
        textInverse: '#FFFFFF',
        // Couleurs de bordure
        border: '#FFCC02',
        borderLight: '#FFF8E1',
        borderDark: '#FFB300',
        // Couleurs d'état
        success: '#8BC34A',
        successLight: '#AED581',
        successDark: '#689F38',
        warning: '#FFC107',
        warningLight: '#FFD54F',
        warningDark: '#FF8F00',
        error: '#F44336',
        errorLight: '#EF5350',
        errorDark: '#C62828',
        info: '#2196F3',
        infoLight: '#64B5F6',
        infoDark: '#1976D2',
    },
};

var arcticLight = {
    name: 'arctic-light',
    displayName: 'Arctic Light',
    category: 'light',
    colors: {
        // Couleurs principales - Bleu glaciaire
        primary: '#01579B',
        primaryLight: '#4FC3F7',
        primaryDark: '#00366B',
        // Couleurs secondaires - Cyan cristal
        secondary: '#00BCD4',
        secondaryLight: '#4DD0E1',
        secondaryDark: '#00838F',
        // Couleurs d'accent - Argent brillant
        accent: '#607D8B',
        accentLight: '#90A4AE',
        accentDark: '#455A64',
        // Couleurs de fond - Blanc polaire
        background: '#FAFAFA',
        backgroundLight: '#FFFFFF',
        backgroundDark: '#F5F5F5',
        surface: '#FFFFFF',
        surfaceLight: '#FAFAFA',
        surfaceDark: '#F5F5F5',
        // Couleurs de texte
        text: '#263238',
        textSecondary: '#455A64',
        textMuted: '#90A4AE',
        textInverse: '#FFFFFF',
        // Couleurs de bordure
        border: '#E0F2F1',
        borderLight: '#F1F8E9',
        borderDark: '#B2DFDB',
        // Couleurs d'état
        success: '#00C853',
        successLight: '#69F0AE',
        successDark: '#00A043',
        warning: '#FFD600',
        warningLight: '#FFFF8D',
        warningDark: '#C6A700',
        error: '#D50000',
        errorLight: '#FF5252',
        errorDark: '#B71C1C',
        info: '#0091EA',
        infoLight: '#40C4FF',
        infoDark: '#006DB3',
    },
};

var lightThemes = [
    oceanicLight,
    sakuraLight,
    forestLight,
    sunsetLight,
    arcticLight,
];

var arcticDark = {
    name: 'arctic-dark',
    displayName: 'Arctic Dark',
    category: 'dark',
    colors: {
        // Couleurs principales - Bleu glaciaire lumineux
        primary: '#4FC3F7',
        primaryLight: '#8BF6FF',
        primaryDark: '#0288D1',
        // Couleurs secondaires - Cyan cristal éclatant
        secondary: '#4DD0E1',
        secondaryLight: '#88FFFF',
        secondaryDark: '#00BCD4',
        // Couleurs d'accent - Argent poli lumineux
        accent: '#90A4AE',
        accentLight: '#C1D5E0',
        accentDark: '#607D8B',
        // Couleurs de fond - Nuit polaire profonde
        background: '#0F1419',
        backgroundLight: '#1A252F',
        backgroundDark: '#0A0E13',
        surface: '#1A252F',
        surfaceLight: '#263238',
        surfaceDark: '#0F1419',
        // Couleurs de texte - Blanc glacé
        text: '#E8F4FD',
        textSecondary: '#B0C4DE',
        textMuted: '#607D8B',
        textInverse: '#0F1419',
        // Couleurs de bordure - Tons glacés sombres
        border: '#37474F',
        borderLight: '#455A64',
        borderDark: '#263238',
        // Couleurs d'état - Adaptées pour mode sombre
        success: '#69F0AE',
        successLight: '#9CFFB5',
        successDark: '#00C853',
        warning: '#FFFF8D',
        warningLight: '#FFFFBF',
        warningDark: '#FFD600',
        error: '#FF5252',
        errorLight: '#FF8A80',
        errorDark: '#D50000',
        info: '#40C4FF',
        infoLight: '#82F7FF',
        infoDark: '#0091EA',
    },
};

var darkThemes = [
    arcticDark,
];

var ThemeContext = react.createContext(null);
// Create allThemes locally to avoid circular dependency
var allThemes$1 = __spreadArray(__spreadArray([], lightThemes, true), darkThemes, true);
var ThemeProvider = function (_a) {
    var children = _a.children, _b = _a.defaultTheme, defaultTheme = _b === void 0 ? 'oceanic-light' : _b, _c = _a.themes, themes = _c === void 0 ? allThemes$1 : _c;
    var _d = react.useState(function () {
        var foundTheme = themes.find(function (theme) { return theme.name === defaultTheme; });
        return foundTheme || themes[0];
    }), currentTheme = _d[0], setCurrentTheme = _d[1];
    var availableThemes = react.useState(themes)[0];
    // Fonction pour changer de thème
    var setTheme = function (themeName) {
        var foundTheme = availableThemes.find(function (theme) { return theme.name === themeName; });
        if (foundTheme) {
            setCurrentTheme(foundTheme);
        }
    };
    // Check si mode sombre
    var isDarkMode = currentTheme.category === 'dark';
    // Basculer entre le premier thème light et dark disponible
    var toggleDarkMode = function () {
        var lightTheme = availableThemes.find(function (theme) { return theme.category === 'light'; });
        var darkTheme = availableThemes.find(function (theme) { return theme.category === 'dark'; });
        if (isDarkMode && lightTheme) {
            setCurrentTheme(lightTheme);
        }
        else if (!isDarkMode && darkTheme) {
            setCurrentTheme(darkTheme);
        }
    };
    // Appliquer les couleurs CSS custom properties au DOM et les styles globaux
    react.useEffect(function () {
        var root = document.documentElement;
        var body = document.body;
        var colors = currentTheme.colors;
        // Appliquer toutes les couleurs comme variables CSS
        Object.entries(colors).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            root.style.setProperty("--theme-".concat(key), value);
        });
        // Variables additionnelles pour faciliter l'usage avec Tailwind
        root.style.setProperty('--theme-primary', colors.primary);
        root.style.setProperty('--theme-secondary', colors.secondary);
        root.style.setProperty('--theme-accent', colors.accent);
        root.style.setProperty('--theme-background', colors.background);
        root.style.setProperty('--theme-surface', colors.surface);
        root.style.setProperty('--theme-text', colors.text);
        // Appliquer les classes de fond et de texte au body
        var classesToRemove = Array.from(body.classList).filter(function (className) {
            return className.startsWith('bg-') || className.startsWith('text-');
        });
        classesToRemove.forEach(function (className) { return body.classList.remove(className); });
        // Ajouter les nouvelles classes
        body.classList.add('bg-background', 'text');
        // Ajouter un attribut data pour identifier le thème
        root.setAttribute('data-theme', currentTheme.name);
        root.setAttribute('data-theme-category', currentTheme.category);
        // Fonction de nettoyage
        return function () {
            body.classList.remove('bg-background', 'text');
            // On ne reset pas les styles inline car ils seront remplacés au prochain rendu
        };
    }, [currentTheme]);
    var contextValue = {
        currentTheme: currentTheme,
        setTheme: setTheme,
        availableThemes: availableThemes,
        isDarkMode: isDarkMode,
        toggleDarkMode: toggleDarkMode,
    };
    return (jsxRuntime.jsx(ThemeContext.Provider, { value: contextValue, children: jsxRuntime.jsx("div", { className: "theme-container", style: {
                color: currentTheme.colors.text,
                backgroundColor: currentTheme.colors.background,
                minHeight: '100vh'
            }, children: children }) }));
};

var useTheme = function () {
    var context = react.useContext(ThemeContext);
    if (!context) {
        throw new Error('useTheme must be used within a ThemeProvider');
    }
    return context;
};
// Hook utilitaire pour accéder rapidement aux couleurs du thème actuel
var useThemeColors = function () {
    var currentTheme = useTheme().currentTheme;
    return currentTheme.colors;
};
// Hook utilitaire pour vérifier si on est en mode sombre
var useIsDarkMode = function () {
    var isDarkMode = useTheme().isDarkMode;
    return isDarkMode;
};
// Hook utilitaire pour basculer entre light/dark
var useToggleDarkMode = function () {
    var toggleDarkMode = useTheme().toggleDarkMode;
    return toggleDarkMode;
};

/**
 * Génère les variables CSS personnalisées pour un thème
 */
var generateCSSVariables = function (theme) {
    var cssVariables = Object.entries(theme.colors)
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return "  --theme-".concat(key, ": ").concat(value, ";");
    })
        .join('\n');
    return ":root {\n".concat(cssVariables, "\n}");
};
/**
 * Génère la configuration Tailwind pour un thème
 * Utile pour intégrer les couleurs dans tailwind.config.js
 */
var generateTailwindConfig = function (theme) {
    var colors = {};
    Object.entries(theme.colors).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        colors[key] = value;
    });
    return {
        extend: {
            colors: {
                theme: colors,
            },
        },
    };
};
/**
 * Génère toutes les variables CSS pour plusieurs thèmes
 */
var generateMultipleThemesCSS = function (themes) {
    return themes
        .map(function (theme) {
        var cssVariables = Object.entries(theme.colors)
            .map(function (_a) {
            var key = _a[0], value = _a[1];
            return "    --theme-".concat(key, ": ").concat(value, ";");
        })
            .join('\n');
        return "[data-theme=\"".concat(theme.name, "\"] {\n").concat(cssVariables, "\n}");
    })
        .join('\n\n');
};
/**
 * Applique un thème au DOM
 */
var applyThemeToDOM = function (theme) {
    var root = document.documentElement;
    // Supprimer l'ancien attribut data-theme
    var currentTheme = root.getAttribute('data-theme');
    if (currentTheme) {
        root.removeAttribute('data-theme');
    }
    // Ajouter le nouveau thème
    root.setAttribute('data-theme', theme.name);
    // Appliquer les variables CSS
    Object.entries(theme.colors).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        root.style.setProperty("--theme-".concat(key), value);
    });
};
/**
 * Convertit une couleur hex en RGB
 */
var hexToRgb = function (hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
};
/**
 * Calcule le contraste entre deux couleurs (utile pour l'accessibilité)
 */
var getContrastRatio = function (color1, color2) {
    var getLuminance = function (hex) {
        var rgb = hexToRgb(hex);
        if (!rgb)
            return 0;
        var r = rgb.r, g = rgb.g, b = rgb.b;
        var _a = [r, g, b].map(function (c) {
            c = c / 255;
            return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
        }), rs = _a[0], gs = _a[1], bs = _a[2];
        return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
    };
    var lum1 = getLuminance(color1);
    var lum2 = getLuminance(color2);
    var brightest = Math.max(lum1, lum2);
    var darkest = Math.min(lum1, lum2);
    return (brightest + 0.05) / (darkest + 0.05);
};
/**
 * Vérifie si une couleur respecte les standards d'accessibilité WCAG
 */
var isAccessible = function (foreground, background, level) {
    if (level === void 0) { level = 'AA'; }
    var contrast = getContrastRatio(foreground, background);
    return level === 'AA' ? contrast >= 4.5 : contrast >= 7;
};

var allThemes = __spreadArray(__spreadArray([], lightThemes, true), darkThemes, true);

exports.ThemeContext = ThemeContext;
exports.ThemeProvider = ThemeProvider;
exports.allThemes = allThemes;
exports.applyThemeToDOM = applyThemeToDOM;
exports.arcticDark = arcticDark;
exports.arcticLight = arcticLight;
exports.darkThemes = darkThemes;
exports.default = allThemes;
exports.forestLight = forestLight;
exports.generateCSSVariables = generateCSSVariables;
exports.generateMultipleThemesCSS = generateMultipleThemesCSS;
exports.generateTailwindConfig = generateTailwindConfig;
exports.getContrastRatio = getContrastRatio;
exports.hexToRgb = hexToRgb;
exports.isAccessible = isAccessible;
exports.lightThemes = lightThemes;
exports.oceanicLight = oceanicLight;
exports.sakuraLight = sakuraLight;
exports.sunsetLight = sunsetLight;
exports.useIsDarkMode = useIsDarkMode;
exports.useTheme = useTheme;
exports.useThemeColors = useThemeColors;
exports.useToggleDarkMode = useToggleDarkMode;
//# sourceMappingURL=index.cjs.js.map
